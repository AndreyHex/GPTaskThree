openapi: 3.0.0
servers:
  - url: localhost:8080/api
    description: Local PC
info:
  description: Api for task two
  version: "1.0.0"
  title: Developer API
  contact:
    email: you@your-company.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
paths:
  /developers/{id}:
    get:
      summary: find a developer by id
      operationId: findById
      description: |
        Finding a developer if he exists
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          description: developer id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: find a developer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Developer'
        '400':
          description: 'invalid input or already exists'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: 'developer not found'
    put:
      summary: update a exists developer by id
      operationId: updateById
      description: |
        Updating a developer if he exists
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          description: developer id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: a developer have been updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Developer'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: 'developer not found'
    delete:
      summary: delete a exists developer by id
      operationId: deleteById
      description: |
        Deliting a developer if he exists
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          description: developer id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: a developer have been deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Developer'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: 'developer not found'
  /developers:
    post:
      summary: create a developer
      operationId: createDeveloper
      description: Create new developer in the service
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Developer'
        description: Developer to add
      responses:
        '201':
          description: developer created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Developer'
        '400':
          description: 'invalid input, object invalid'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/Forbidden'
  /developers/name/{name}:
    get:
      summary: finding developers by name
      operationId: findByName
      description: Find all developers by name
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: name
          description: developer name
          required: true
          schema:
            type: string
      responses:
        '200':
          description: find a developer
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Developer'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: 'developer not found'
  /builder-jwt:
    post:
      summary: generate new jwt token
      operationId: getJwtToken
      description: Generataring jwt token with passed parameters in request body
      requestBody:
        description: parameters for token
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JwtRequest'
      responses:
        '200':
          description: generated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JwtToken'
        '400':
          description: error
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
    Forbidden:
      description: Access denied
  schemas:
    Developer:
      type: object
      required:
        - id
        - name
        - email
      properties:
        id:
          type: integer
          format: int64
          example: 123
        name:
          type: string
          example: John Smith
        email:
          type: string
          format: email
          example: myemail@mail.com
    JwtToken:
      type: object
      required:
        - token
      properties:
        token:
          type: string
          example: xxxxxxx.yyyyyyy.zzzzzzzz
    JwtRequest:
      type: object
      required:
        - iss
        - sub
        - roles
      properties:
        iss:
          type: string
          example: GP
        sub:
          type: string
          example: task3
        roles:
          type: array
          items:
            $ref: '#/components/schemas/Role'
    Role:
      type: string
      enum: [ADMIN, USER, HR]
      example: ADMIN